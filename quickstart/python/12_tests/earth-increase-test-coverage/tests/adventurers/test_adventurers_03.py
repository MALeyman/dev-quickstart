import pytest
from earth import (
    Adventurer,
    new_panda,
    new_bear,
    Months,
    Busy,
    AirportProblem
)

@pytest.fixture(name="alice")
def fixture_alice():
    return Adventurer(name="Alice", location="Australia", profile="üê®")

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ Adventurer
def test_adventurer_creation(alice):
    # adventurer = Adventurer(name="Alice", location="Australia", profile="üê®")
    assert alice.name == "Alice"
    assert alice.location == "Australia"
    assert alice.profile == "üê®"
    assert alice._availability == list(Months)

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ hello
def test_hello_method(capfd):
    adventurer = Adventurer(name="Bob", location="Africa", profile="ü¶Å")
    adventurer.hello()
    captured = capfd.readouterr()
    assert captured.out.strip() == "ü¶Å Bob Hello, my name is Bob!"

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RSVP –º–µ—Ç–æ–¥–∞
def test_rsvp_available():
    event = type('Event', (object,), {'month': Months.JUN, 'location': 'Asia'})()
    adventurer = new_bear("Chris")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ RSVP –ø—Ä–æ—Ö–æ–¥–∏—Ç —É—Å–ø–µ—à–Ω–æ
    adventurer.rsvp(event)
    assert not adventurer._calendar[Months.JUN]

def test_rsvp_busy():
    event = type('Event', (object,), {'month': Months.JAN, 'location': 'Asia'})()
    adventurer = new_bear("Chris")
    
    # –ò–∑–º–µ–Ω—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç—å
    adventurer.rsvp(event)
    
    with pytest.raises(Busy):
        adventurer.rsvp(event)

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ get_ready –º–µ—Ç–æ–¥–∞
def test_get_ready(capfd):
    adventurer = Adventurer(name="Diana", location="North America", profile="üêª")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ get_ready –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
    is_ready = adventurer.get_ready()
    assert is_ready is True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–≤–æ–¥ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ
    captured = capfd.readouterr()
    assert "üêª Diana is packing" in captured.out

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ travel_to –º–µ—Ç–æ–¥–∞ –±–µ–∑ –ø—Ä–æ–±–ª–µ–º —Å –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–º
def test_travel_to_success(capfd):
    event = type('Event', (object,), {'month': Months.JUN, 'location': 'Asia'})()
    
    adventurer = new_panda("Po")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —É—Å–ø–µ—à–Ω–æ
    adventurer.travel_to(event)
    
    captured = capfd.readouterr()
    
    assert "üêº Po is travelling: Asia ‚úàÔ∏è  Asia" in captured.out

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ travel_to –º–µ—Ç–æ–¥–∞ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –≤ –∞—ç—Ä–æ–ø–æ—Ä—Ç—É
def test_travel_to_airport_problem(capfd):
    event = type('Event', (object,), {'month': Months.JUN, 'location': 'Unknown'})()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∫–ª—é—á–µ–Ω—Ü–∞ —Å –ø—Ä–æ–±–ª–µ–º–æ–π –≤ –∞—ç—Ä–æ–ø–æ—Ä—Ç—É
    class MockAirportProblem(AirportProblem):
        pass
    
    def mock_fly(location_from, location_to):
        raise MockAirportProblem("Flight cancelled")
    
    global fly  # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é fly –¥–ª—è —Ç–µ—Å—Ç–∞
    original_fly = fly  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é fly
    try:
        fly = mock_fly  # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞ –º–æ–∫-—Ñ—É–Ω–∫—Ü–∏—é
        
        adventurer = new_panda("Po")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–º
        adventurer.travel_to(event)
        
        captured = capfd.readouterr()
        assert "üêº Po's flight was cancelled üòû Flight cancelled" in captured.out
        
    finally:
        fly = original_fly  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é fly

